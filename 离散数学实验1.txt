#include<iostream>
#include<vector>
#include<cmath>
#include<string>
using namespace std;
int determine_if_there_are_brackets(string exp0)
{
	for(int i=0;i<exp0.length();i++)
		if(exp0[i]=='(')
		{	
			return 1;
		}
		else continue;
	return 0;
}
void ui()
{
	cout << "****************************************" << endl;
	cout << "**         欢迎使用真值运算系统       **" << endl;  
	cout << "**可运算真值表,主析(合)取范式,支持括号**" << endl;  
	cout << "**                                    **" << endl; 
	cout << "**     析取符号用||  合取符号用&&     **" << endl;  
	cout << "**  单条件用->  双条件用<->  否定用~  **" << endl;  
	cout << "**                                    **" << endl;  
	cout << "****************************************" << endl;  
	cout << "请输入合法的命题公式: ";   
}
void all_truth(vector<vector<int>>&a,int t,int n,int m)
{
	for(int i=0;i<t;i++)
	for(int j=0;j<n;j++)
		a[i][j]=1;
	int q=1,j;
	do{
		for(j=1;pow(2.0,m-1)+j<=pow(2.0,n);)
		{
			a[pow(2.0,m-1)+j-1][q-1]=0;
			j++;
			if((j-1)%(int)pow(2.0,m-1)==0)
			{
				j+=pow(2.0,m-1);
			}
		}
		q++;m--;
	}while(q<=n);
}
void cal_negative(vector<char>expl0,vector<vector<int>>a,string &exp1,int &find_left_bracket,int &find_right_bracket,int row,int countl)
{
	for(int i=find_left_bracket;i<find_right_bracket;i++)
			{
				if(exp1[i]=='~')
				{
					for(int j=0;j<countl;j++)
					{
						if(exp1[i+1]==expl0[j])//替换过后的新串i+1可能会超过exp1.length()-1
						{
							if(a[row][j]==1)
							{
								exp1.replace(i,2,"F");
								find_right_bracket-=1;//注意替换后exp1的长度会变化
								i--;
							}
							else if(a[row][j]==0)
							{
								exp1.replace(i,2,"T");
								find_right_bracket-=1;
								i--;
							}
						}
					}
				}
			}
			do{	for(int i=find_left_bracket;i<find_right_bracket;i++)
				{
					if(exp1[i]=='~'&&exp1[i+1]=='T')
					{
						exp1.replace(i,2,"F");
						find_right_bracket-=1;
					}
					else if(exp1[i]=='~'&&exp1[i+1]=='F')
					{
						exp1.replace(i,2,"T");
						find_right_bracket-=1;
					}
				}
			}while(exp1.find("~")<=find_right_bracket&&exp1.find("~")>=find_left_bracket);
}
void cal_conjunctive_disjunctive(vector<char>expl0,vector<vector<int>>a,string &exp1,int &find_left_bracket,int &find_right_bracket,int row,int countl)
{
	for(int i=find_left_bracket,j1,j2;i<find_right_bracket;i++)
			{
				if(exp1[i]=='&'&&exp1[i+1]=='&')
				{	
					if(exp1[i-1]!='T'&&exp1[i-1]!='F'&&exp1[i+2]!='T'&&exp1[i+2]!='F')	
					{	
						for(j1=0;j1<countl;j1++)
							if(exp1[i-1]==expl0[j1])break;
						for(j2=0;j2<countl;j2++)
							if(exp1[i+2]==expl0[j2])break;
						if(a[row][j1]==1&&a[row][j2]==1)
						{
							exp1.replace(i-1,4,"T");
							find_right_bracket-=3;
							i--;
						}
						else if(a[row][j1]==0||a[row][j2]==0)
						{
							exp1.replace(i-1,4,"F");
							find_right_bracket-=3;
							i--;
						}
					}
					else if(exp1[i-1]=='F'||exp1[i+2]=='F')
					{	
						exp1.replace(i-1,4,"F");
						find_right_bracket-=3;
						i--;
					}
					else if(exp1[i-1]=='T'&&exp1[i+2]=='T')
					{
						exp1.replace(i-1,4,"T");
						find_right_bracket-=3;
						i--;
					}
					else if(exp1[i-1]=='T')
					{
						for(j2=0;j2<countl;j2++)
							if(exp1[i+2]==expl0[j2])break;
						if(a[row][j2]==1)
						{
							exp1.replace(i-1,4,"T");
							find_right_bracket-=3;
							i--;
						}
						else if(a[row][j2]==0)
						{
							exp1.replace(i-1,4,"F");
							find_right_bracket-=3;
							i--;
						}
					}
					else if(exp1[i+2]=='T')
					{
						for(j1=0;j1<countl;j1++)
							if(exp1[i-1]==expl0[j1])break;
						if(a[row][j1]==1)
						{
							exp1.replace(i-1,4,"T");
							find_right_bracket-=3;
							i--;
						}
						else if(a[row][j1]==0)
						{
							exp1.replace(i-1,4,"F");
							find_right_bracket-=3;
							i--;
						}
					}
				}
				else if(exp1[i]=='|'&&exp1[i+1]=='|')
				{
					if(exp1[i-1]!='T'&&exp1[i-1]!='F'&&exp1[i+2]!='T'&&exp1[i+2]!='F')	
					{	
						for(j1=0;j1<countl;j1++)
							if(exp1[i-1]==expl0[j1])break;
						for(j2=0;j2<countl;j2++)
							if(exp1[i+2]==expl0[j2])break;
						if(a[row][j1]==0&&a[row][j2]==0)
						{
							exp1.replace(i-1,4,"F");
							find_right_bracket-=3;
							i--;
						}
						else if(a[row][j1]==1||a[row][j2]==1)
						{
							exp1.replace(i-1,4,"T");
							find_right_bracket-=3;
							i--;
						}
					}
					else if(exp1[i-1]=='T'||exp1[i+2]=='T')
					{
						exp1.replace(i-1,4,"T");
						find_right_bracket-=3;
						i--;
					}
					else if(exp1[i-1]=='F'&&exp1[i+2]=='F')
					{
						exp1.replace(i-1,4,"F");
						find_right_bracket-=3;
						i--;
					}
					else if(exp1[i-1]=='F')
					{
						for(j2=0;j2<countl;j2++)
							if(exp1[i+2]==expl0[j2])break;
						if(a[row][j2]==1)
						{
							exp1.replace(i-1,4,"T");
							find_right_bracket-=3;
							i--;
						}
						else if(a[row][j2]==0)
						{
							exp1.replace(i-1,4,"F");
							find_right_bracket-=3;
							i--;
						}
					}
					else if(exp1[i+2]=='F')
					{
						for(j1=0;j1<countl;j1++)
							if(exp1[i-1]==expl0[j1])break;
						if(a[row][j1]==1)
						{
							exp1.replace(i-1,4,"T");
							find_right_bracket-=3;
							i--;
						}
						else if(a[row][j1]==0)
						{
							exp1.replace(i-1,4,"F");
							find_right_bracket-=3;
							i--;
						}
					}
				}
			}
}
void cal_single_condition(vector<char>expl0,vector<vector<int>>a,string &exp1,int &find_left_bracket,int &find_right_bracket,int row,int countl)
{
	for(int i=find_left_bracket,j1,j2;i<find_right_bracket;i++)
			{
				if(i>0&&exp1[i-1]!='<'&&exp1[i]=='-'&&exp1[i+1]=='>')
				{
					if(exp1[i-1]!='T'&&exp1[i-1]!='F'&&exp1[i+2]!='T'&&exp1[i+2]!='F')	
					{
						for(j1=0;j1<countl;j1++)
							if(exp1[i-1]==expl0[j1])break;
						for(j2=0;j2<countl;j2++)
							if(exp1[i+2]==expl0[j2])break;
						if(a[row][j2]==1)
						{
							exp1.replace(i-1,4,"T");
							find_right_bracket-=3;
							i--;
						}
						else if(a[row][j1]==1)
						{
							exp1.replace(i-1,4,"F");
							find_right_bracket-=3;
							i--;
						}
						else if(a[row][j1]==0)
						{
							exp1.replace(i-1,4,"T");
							find_right_bracket-=3;
							i--;
						}
					}
					else if(exp1[i+2]=='T'||exp1[i-1]=='F')
					{
						exp1.replace(i-1,4,"T");
						find_right_bracket-=3;
						i--;
					}
					else if(exp1[i-1]=='T'&&exp1[i+2]=='F')
					{
						exp1.replace(i-1,4,"F");
						find_right_bracket-=3;
						i--;
					}
					else if(exp1[i-1]=='T')
					{
						for(j2=0;j2<countl;j2++)
							if(exp1[i+2]==expl0[j2])break;
						if(a[row][j2]==1)
						{
							exp1.replace(i-1,4,"T");
							find_right_bracket-=3;
							i--;
						}
						else if(a[row][j2]==0)
						{
							exp1.replace(i-1,4,"F");
							find_right_bracket-=3;
							i--;
						}
					}
					else if(exp1[i+2]=='F')
					{
						for(j1=0;j1<countl;j1++)
							if(exp1[i-1]==expl0[j1])break;
						if(a[row][j1]==1)
						{
							exp1.replace(i-1,4,"F");
							find_right_bracket-=3;
							i--;
						}
						else if(a[row][j1]==0)
						{
							exp1.replace(i-1,4,"T");
							find_right_bracket-=3;
							i--;
						}
					}
				}
			}
}
void cal_double_condition(vector<char>expl0,vector<vector<int>>a,string &exp1,int &find_left_bracket,int &find_right_bracket,int row,int countl)
{
	for(int i=find_left_bracket,j1,j2;i<find_right_bracket;i++)
			{
				if(exp1[i]=='<'&&exp1[i+1]=='-'&&exp1[i+2]=='>')
				{
					if(exp1[i-1]!='T'&&exp1[i-1]!='F'&&exp1[i+3]!='T'&&exp1[i+3]!='F')
					{
						for(j1=0;j1<countl;j1++)
							if(exp1[i-1]==expl0[j1])break;
						for(j2=0;j2<countl;j2++)
							if(exp1[i+3]==expl0[j2])break;
						if((a[row][j1]==1&&a[row][j2]==1)||(a[row][j1]==0&&a[row][j2]==0))
						{
							exp1.replace(i-1,5,"T");
							find_right_bracket-=4;
							i--;
						}
						else
						{
							exp1.replace(i-1,5,"F");
							find_right_bracket-=4;
							i--;
						}
					}
					else if((exp1[i-1]=='T'&&exp1[i+3]=='T')||(exp1[i-1]=='F'&&exp1[i+3]=='F'))
					{
						exp1.replace(i-1,5,"T");
						find_right_bracket-=4;
						i--;
					}
					else if((exp1[i-1]=='T'&&exp1[i+3]=='F')||(exp1[i-1]=='F'&&exp1[i+3]=='T'))
					{
						exp1.replace(i-1,5,"F");
						find_right_bracket-=4;
						i--;
					}
					else if(exp1[i-1]=='T')
					{
						for(j2=0;j2<countl;j2++)
							if(exp1[i+3]==expl0[j2])break;
						if(a[row][j2]==0)
						{
							exp1.replace(i-1,5,"F");
							find_right_bracket-=4;
							i--;
						}
						else if(a[row][j2]==1)
						{
							exp1.replace(i-1,5,"T");
							find_right_bracket-=4;
							i--;
						}
					}
					else if(exp1[i-1]=='F')
					{
						for(j2=0;j2<countl;j2++)
							if(exp1[i+3]==expl0[j2])break;
						if(a[row][j2]==0)
						{
							exp1.replace(i-1,5,"T");
							find_right_bracket-=4;
							i--;
						}
						else if(a[row][j2]==1)
						{
							exp1.replace(i-1,5,"F");
							find_right_bracket-=4;
							i--;
						}
					}
					else if(exp1[i+3]=='T')
					{
						for(j1=0;j1<countl;j1++)
							if(exp1[i-1]==expl0[j1])break;
						if(a[row][j1]==0)
						{
							exp1.replace(i-1,5,"F");
							find_right_bracket-=4;
							i--;
						}
						else if(a[row][j1]==1)
						{
							exp1.replace(i-1,5,"T");
							find_right_bracket-=4;
							i--;
						}
					}
					else if(exp1[i+3]=='F')
					{
						for(j1=0;j1<countl;j1++)
							if(exp1[i-1]==expl0[j1])break;
						if(a[row][j1]==0)
						{
							exp1.replace(i-1,5,"T");
							find_right_bracket-=4;
							i--;
						}
						else if(a[row][j1]==1)
						{
							exp1.replace(i-1,5,"F");
							find_right_bracket-=4;
							i--;
						}
					}
				}				
			}
}
void judge_cal_truth_in_bracket(string &exp1,int &find_left_bracket,int &find_right_bracket,int row)
{
	if(find_left_bracket==find_right_bracket&&row==0&&exp1!="T"&&exp1!="F")
			{
				exp1.replace(find_left_bracket,1,"T");
			}
			else if(find_left_bracket==find_right_bracket&&row==1&&exp1!="T"&&exp1!="F")
			{
				exp1.replace(find_left_bracket,1,"F");
			}
			//cout<<find_left_bracket<<" "<<find_right_bracket;//debug
			if(find_left_bracket>=0&&find_right_bracket<=exp1.length()-1&&exp1[find_left_bracket]=='('&&exp1[find_right_bracket]==')'&&find_left_bracket-find_right_bracket==-2&&exp1[find_left_bracket+1]=='T')
			{	exp1.replace(find_left_bracket,3,"T");
				find_right_bracket-=2;
			}
			else if(find_left_bracket>=0&&find_right_bracket<=exp1.length()-1&&exp1[find_left_bracket]=='('&&exp1[find_right_bracket]==')'&&find_left_bracket-find_right_bracket==-2&&exp1[find_left_bracket+1]=='F')
			{	exp1.replace(find_left_bracket,3,"F");
				find_right_bracket-=2;
			}
}
void main()
{
	ui();
	string exp0,exp1;
	cin>>exp0;//原表达式
	exp1=exp0;
	vector<char>expl0(exp0.length()+exp1.length());//只含命题的char型数组
	string letter="QWERYUIOPASDGHJKLZXCVBNM";
	vector<int>count(letter.length()+exp0.length());
	for(int i=0;i<letter.length()+exp0.length();i++)
		count[i]=0;
	int T=0;
	for(int j=0;j<exp0.length();j++)
	for(int i=0;i<letter.length();i++)
		if(exp0[j]==letter[i])
		{	
			count[j]=1;
			letter.erase(i,1);
			expl0[T]=exp0[j];
			T++;
		}
	int countl=0;
	for(int i=0;i<letter.length()+exp0.length();i++)
		if(count[i]==1)
			countl++;//命题个数
	/*cout<<countl<<endl;*///调试代码
	for(int i=0;i<countl;i++)
		cout<<expl0[i]<<" ";
	cout<<"表达式真值";
	cout<<"\n";
	int m,n;
	m=n=countl;//列举可能的真值
	double t=pow(2.0,n);
	vector<vector<int>> a((int)t,n);
	vector<vector<int>> b((int)t,n);
	all_truth(a,t,n,m);
	b=a;
	vector<int>truth_value(t);
	int allow=0;		
	int find_left_bracket,find_right_bracket;
	for(int row=0;row<t;row++)//一行一行赋值
	{
		exp1=exp0;
		allow=0;
		do{
			if(determine_if_there_are_brackets(exp1)==1)
			{
				find_left_bracket=exp1.find("(");
				for(int i=find_left_bracket+1;i<exp1.length();i++)
					if(exp1[i]=='(')find_left_bracket=i;
					else if(exp1[i]==')')
					{
						find_right_bracket=i;
						break;
					}
			}
			else if(determine_if_there_are_brackets(exp1)==0)
			{
				find_left_bracket=0;
				find_right_bracket=exp1.length()-1;
			}
			cal_negative(expl0,a,exp1,find_left_bracket,find_right_bracket,row,countl);
			cal_conjunctive_disjunctive(expl0,a,exp1,find_left_bracket,find_right_bracket,row,countl);
			cal_single_condition(expl0,a,exp1,find_left_bracket,find_right_bracket,row,countl);
			cal_double_condition(expl0,a,exp1,find_left_bracket,find_right_bracket,row,countl);
			judge_cal_truth_in_bracket(exp1,find_left_bracket,find_right_bracket,row);
			if(exp1=="T")
			{	
				truth_value[row]=1;
				allow=1;
			}
			else if(exp1=="F")
			{	
				truth_value[row]=0;
				allow=1;
			}
			//cout<<exp1<<"\n";//debug
		}while(allow==0);//有问题
	}
	for(int i=0;i<t;i++)
	{
		for(int j=0;j<n;j++)
		{
			if(a[i][j]==0)cout<<"F ";
			if(a[i][j]==1)cout<<"T ";
		}
		if(truth_value[i]==0)
			cout<<"    F\n";
		else if(truth_value[i]==1)
			cout<<"    T\n";
	}
	int record_disjunctive=0;
	for(int row=0;row<t;row++)
	{
		if(truth_value[row]==1)
		{
			record_disjunctive++;
		}
	}
	cout<<"主析取范式为:";
	int judge_disjunctive=0;
	for(int row=0;row<t;row++)
	{
		if(truth_value[row]==1)
		{
			for(int j=0;j<countl;j++)
				if(a[row][j]==1)
				{	
					if(j==0)
						cout<<"(";
					cout<<expl0[j];
					if(j<countl-1)
					cout<<"∧";
					else if(j==countl-1)
						cout<<")";
				}
				else if(a[row][j]==0)
				{	
					if(j==0)
						cout<<"(";
					cout<<"￢";
					cout<<expl0[j];
					if(j<countl-1)
					cout<<"∧";
					else if(j==countl-1)
						cout<<")";
				}
				if(judge_disjunctive<record_disjunctive-1)
				{
					cout<<"∨";
					judge_disjunctive++;
				}
		}
	}
	cout<<"\n";//∧∨￢
	cout<<"主合取范式为:";
	int judge_conjunctive=0;
	int record_conjunctive=0;
	for(int row=0;row<t;row++)
	{
		if(truth_value[row]==0)
		{
			record_conjunctive++;
		}
	}
	for(int row=0;row<t;row++)
	{
		if(truth_value[row]==0)
		{
			for(int j=0;j<countl;j++)
				if(a[row][j]==0)
				{	
					if(j==0)
						cout<<"(";
					cout<<expl0[j];
					if(j<countl-1)
					cout<<"∨";
					else if(j==countl-1)
						cout<<")";
				}
				else if(a[row][j]==1)
				{	
					if(j==0)
						cout<<"(";
					cout<<"￢";
					cout<<expl0[j];
					if(j<countl-1)
					cout<<"∨";
					else if(j==countl-1)
						cout<<")";
				}
				if(judge_conjunctive<record_conjunctive-1)
				{
					cout<<"∧";
					judge_conjunctive++;
				}
		}
	}
	cout<<"\n";
}